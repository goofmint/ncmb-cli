#!/usr/bin/env node
let program = require('commander');
let NCMB = require('ncmb');
let common = require('../lib/common');
let path = require('path');
let fs = require('fs');
let parse = require('csv-parse');

ncmb = null;

program
  .version('0.0.1')
  .option('-a, --application_key [application_key]', 'Your application Key', '')
  .option('-c, --client_key [client_key]', 'Your client key', '')
  .option('-b, --boolean [true or false]', 'Convert boolean. "True" changes to true and "False" changes to false. Case is not sensitive.', false)
  .option('-d, --date [true or false]', 'Convert date. Convert similar date format string to date object like YYYY-mm-ddTHH:MM:SS+09:00', false)
  .option('--object [true or false]', 'Convert object. Value should be parseable for json.', false)
  .option('--classname [className]', 'Import class name. Default is file name eg. User.json -> User.')
  .option('-l, --location [true or false]', 'Convert location. Similar location format string converts to location like 99.99999..,999.99999.. ', false)
  .parse(process.argv);

if (typeof program.args[0] == 'undefined') {
  console.log('CSV file path is require.');
  process.exit(1);
}
let classname = typeof program.classname == 'undefined' ? path.basename(program.args[0], path.extname(program.args[0])) : program.classname;

common.load_config(program.application_key, program.client_key)
  .then(function(json) {
    main(json.application_key, json.client_key);
  },
  function(error) {
    console.log(error);
    process.exit(1);
  }
);

const main = async (applicationKey, clientKey) => {
  ncmb = new NCMB(applicationKey, clientKey);
  const results = program.args[0].match(/.*\.csv$/) ? 
    common.csv2json(program.args[0], program) :
    require(program.args[0]).results;
  for (let i in results) {
    let className = ncmb.DataStore(classname);
    let params = results[i];
    await fetchOrCreate(className, params, i);
  }
};

const fetchOrCreate = async (ClassName, params, i) => {
  let item = new ClassName;
  for (let k in params) {
    ClassName = ClassName.equalTo(k, params[k]);
  }
  const obj = await ClassName.fetch();
  if (obj.objectId) {
    // データあり
    console.log('Row #'+(parseInt(i)+1) + ', data exist. objectId is '+obj.objectId);
    return obj;
  }
  for (let k in params) {
    if (['objectId', 'createDate', 'updateDate', 'acl'].indexOf(k) > -1) {
      continue;
    }
    item.set(k, params[k]);
  }
  if (ClassName._className === '/classes/Installation') {
    try {
      const obj = await ncmb.request({
        path: '/' + ncmb.version + '/installations',
        method: 'POST',
        data: item,
      });
      obj = JSON.parse(obj);
      console.log('Row #'+(parseInt(i)+1) + ', data saved. objectId is '+obj.objectId);
    } catch (err) {
      console.error(err);
      return new Error(err);
    }
  }else{
    try {
      const obj = await item.save();
      console.log('Row #'+(parseInt(i)+1) + ', data saved. objectId is '+obj.objectId);
      return obj;
    } catch (err) {
      return new Error(err);
    }
  }
};
